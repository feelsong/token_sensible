import "util.scrypt";
import "tokenProto.scrypt";
import "rabinUtil.scrypt";

contract TokenGenesis {
  PubKey pubKey;
  int[3] rabinPubKeyArray;
  bytes originOutPoint;

  public function unlock(
    SigHashPreimage txPreimage,
    Sig sig,
    bytes rabinMsg,
    bytes[2] rabinPaddingArray,
    int[2] rabinSigArray,
    int[2] rabinPubKeyIndexArray,
    int genesisSatoshis,
    bytes tokenScript,
    int tokenSatoshis,
    Ripemd160 changeAddress,
    int changeSatoshis,
    bytes opReturnScript
    ) {

    require(Tx.checkPreimage(txPreimage));

    // check sig
    require(checkSig(sig, this.pubKey));

    // check input script oracle data
    bytes genesisScript = Util.scriptCode(txPreimage);
    int dataLen = len(genesisScript);
    bytes tokenID = hash160(genesisScript);
    bytes tokenName = TokenProto.getTokenName(genesisScript, dataLen);
    bytes tokenSymbol = TokenProto.getTokenSymbol(genesisScript, dataLen);
    int isGenesis = TokenProto.getGenesisFlag(genesisScript, dataLen);
    require(isGenesis == 1);
    int decimalNum = TokenProto.getDecimalNum(genesisScript, dataLen);
    bytes address = TokenProto.getTokenAddress(genesisScript, dataLen);
    require(address == b'0000000000000000000000000000000000000000');
    int tokenValue = TokenProto.getTokenAmount(genesisScript, dataLen);
    require(tokenValue == 0);
    require(TokenProto.getTokenID(genesisScript, dataLen) == b'0000000000000000000000000000000000000000');
    int protoType = TokenProto.getProtoType(genesisScript, dataLen);
    require(protoType == TokenProto.PROTO_TYPE);
    bytes flag = TokenProto.getProtoFlag(genesisScript, dataLen);
    require(flag == TokenProto.PROTO_FLAG);
    // check opreturn
    require(TokenProto.checkDataLen(genesisScript, dataLen));
    require(TokenProto.checkOpReturn(genesisScript, dataLen));

    // check the rabin msg
    bytes thisOutpoint = Util.outpoint(txPreimage);
    int verifyCount = RabinUtil.verifyMsgThree(this.rabinPubKeyArray, rabinMsg, rabinPaddingArray, rabinSigArray, rabinPubKeyIndexArray);
    require(verifyCount == 2);

    PayloadU4SpendByData pl = RabinUtil.loadPayloadU4SpendBy(rabinMsg);
    require(pl.byTxId == thisOutpoint[ : 32]);
    require(pl.outpoint == this.originOutPoint || hash160(genesisScript) == pl.scriptHash);

    // check tokenScript oracle data
    dataLen = len(tokenScript);

    require(tokenName == TokenProto.getTokenName(tokenScript, dataLen));
    require(tokenSymbol == TokenProto.getTokenSymbol(tokenScript, dataLen));
    require(0 == TokenProto.getGenesisFlag(tokenScript, dataLen));
    require(decimalNum == TokenProto.getDecimalNum(tokenScript, dataLen));
    require(tokenID == TokenProto.getTokenID(tokenScript, dataLen));
    protoType = TokenProto.getProtoType(tokenScript, dataLen);
    require(protoType == TokenProto.PROTO_TYPE);
    require(TokenProto.PROTO_FLAG == TokenProto.getProtoFlag(tokenScript, dataLen));
    // check opreturn
    require(TokenProto.checkDataLen(tokenScript, dataLen));
    require(TokenProto.checkOpReturn(tokenScript, dataLen));

    bytes genesisOutput = b'';
    if (genesisSatoshis > 0) {
      genesisOutput = Util.buildOutput(genesisScript, genesisSatoshis);
    }
    bytes tokenOutput = Util.buildOutput(tokenScript, tokenSatoshis);

    // op_false op_return output
    bytes opReturnOutput = b'';
    if (len(opReturnScript) > 0) {
      require(opReturnScript[0:2] == b'006a');
      opReturnOutput = Util.buildOutput(opReturnScript, 0);
    }

    bytes changeOutput = b'';
    if (changeSatoshis > 0) {
      bytes changeScript = Util.buildPublicKeyHashScript(changeAddress);
      changeOutput = Util.buildOutput(changeScript, changeSatoshis);
    }
    bytes hashOutput = hash256(genesisOutput + tokenOutput + opReturnOutput + changeOutput);
    require(hashOutput == Util.hashOutputs(txPreimage));
  }
}